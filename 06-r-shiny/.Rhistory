lapply(1:nrow(key), function(k) c(key2$target1[k], key2$target2[k])[which(!is.na(key2[k, 2:3]))])
lapply(1:nrow(key2), function(k) c(key2$target1[k], key2$target2[k])[which(!is.na(key2[k, 2:3]))])
key <- lapply(1:nrow(key2), function(k) c(key2$target1[k], key2$target2[k])[which(!is.na(key2[k, 2:3]))])
lineups$key <- key
primary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
if(is.na(i[[j]][1])){
return(NA)
} else if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][1])
#       print(tmp)
return(ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp]))
}else{
qtype <- ifelse(j%in%color, "Similarity", "Position")
return(ifelse(key[[j]]==i[[j]][1], qtype, "X"))
}
return("")
}))
})
secondary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
ans <- ""
if(length(i[[j]])<2 || length(key[[j]])<2) return(NA)
if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][2])
#       print(tmp)
return(ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp]))
}
}))
})
lineup.summary <- data.frame(name=primary.ans$.id,
position = rowSums(primary.ans[,slope+1]=="Position", na.rm=TRUE),
similarity = rowSums(primary.ans[,color+1]=="Similarity", na.rm=TRUE),
dual.pos = rowSums(primary.ans[,dual+1]=="Position", na.rm=TRUE),
dual.sim = rowSums(primary.ans[,dual+1]=="Similarity", na.rm=TRUE),
dual.pos.secondary = rowSums(secondary.ans[,dual+1]=="Position", na.rm=TRUE),
dual.sim.secondary = rowSums(secondary.ans[,dual+1]=="Similarity", na.rm=TRUE))
lineup.summary
head(cog.tests)
cog.tests <- cbind(name=c("awesomesauce", "di", "geoff", "ianl", "ianm", "lindsay", "num", "sam", "sarah", "walter", "xiaoyue", "zorro"), rbind(awesomesauce.cog, di.cog, geoff.cog, ianl.cog, ianm.cog, lindsay.cog, num.cog, sam.cog, sarah.cog, walter.cog, xiaoyue.cog, zorro.cog))
cog.tests <- cbind(name=c("awesomesauce", "di", "geoff", "ianl", "ianm", "lindsay", "num", "sam", "sarah", "walter", "xiaoyue", "zorro"), cog.tests)
cog.tests
qplot(data=cog.tests, x=paper.folding, y=fig.class)
library(ggplot2)
qplot(data=cog.tests, x=paper.folding, y=fig.class)
qplot(data=cog.tests, x=card.rotation, y=fig.class)
qplot(data=cog.tests, x=card.rotation, y=vst)
qplot(data=cog.tests, x=card.rotation, y=vst/vst.attempt)
qplot(data=lineup.summary, x=position, y=dual.pos)
qplot(data=lineup.summary, x=position)
lineup.summary2 <- melt(lineup.summary, id.vars=name)
library(reshape2)
lineup.summary2 <- melt(lineup.summary, id.vars=name)
lineup.summary2 <- melt(lineup.summary, id.vars=1)
head(lineup.summary)
head(lineup.summary2)
qplot(data=lineup.summary2, x=value, facets=~variable)
qplot(data=lineup.summary2, x=value, facets=~variable, binwidth=1)
qplot(data=lineup.summary2, x=value, facets=~variable, binwidth=1, weight=value)
qplot(data=lineup.summary2, x=value, facets=~variable, binwidth=1)
as.list(1:3)
as.list(letters[1:3])
names(as.list(letters[1:3]))
library(rbamtools)
bam <- bamReader("./Documents/R Projects/Soybeans/cnv/bam/Adams.bam")
bam <- system.file("extdata", "./Documents/R Projects/Soybeans/cnv/bam/Adams.bam", package="rbamtools")
bam <- bamReader(bam)
?system.file
bam <- system.file("./Documents/R Projects/Soybeans/cnv/bam/", "Adams.bam", package="rbamtools")
bam <- bamReader(bam)
bam <- system.file("./Documents/R Projects/Soybeans/cnv/bam/", "Adams.bam", package="rbamtools")
bam
bam <- system.file("./Documents/R Projects/Soybeans/cnv/bam/Adams.bam", package="rbamtools")
bam
bam <- system.file("~/Documents/R Projects/Soybeans/cnv/bam/Adams.bam", package="rbamtools")
ba
bam
bam <- system.file("~/Documents/R Projects/Soybeans/cnv/bam/Adams.bam", package="rbamtools")
bam <- bamReader(bam)
bam <- bamReader("~/Documents/R Projects/Soybeans/cnv/bam/Adams.bam")
bam <- bamReader("~/Documents/R Projects/Soybeans/cnv/Amsoy.bam")
bam <- system.file("~/Documents/R Projects/Soybeans/cnv/Amsoy.bam", package="rbamtools")
bam <- bamReader(bam)
bam <- system.file("extdata", "~/Documents/R Projects/Soybeans/cnv/Amsoy.bam", package="rbamtools")
bam <- bamReader(bam)
library(RSamTools)
library(Rsamtools)
bam <- scanBam("~/Documents/R Projects/Soybeans/cnv/Amsoy.bam")
head(bam)
str(bam)
bam2 <- as.data.frame(bam[1:11])
bam2 <- data.frame(seqname=bam[["rname"]], isize=bam[["isize"]], stringsAsFactors=FALSE)
names(bam)
bam[[1]][1:10]
bam2 <- data.frame(seqname=bam[[1]][["rname"]], isize=bam[[1]][["isize"]], stringsAsFactors=FALSE)
qplot(data=bam2, x=isize, group=seqname, geom="density")
library(ggplot2)
qplot(data=bam2, x=isize, group=seqname, geom="density")
qplot(data=bam2, x=isize, group=seqname, geom="density") + facet_wrap(~seqname)
summary(bam2$isize)
qplot(data=subset(bam2, abs(isize)<10000), x=isize, group=seqname, geom="density") + facet_wrap(~seqname)
str(bam)
bam <- bam[[1]]
bam2 <- data.frame(seqname=bam[["rname"]], qwidth=bam[["qwidth"]], mapq=bam[["mapq"]], isize=bam[["isize"]], stringsAsFactors=FALSE)
unique(bam2$seqname)
qplot(data=subset(bam2), x=qwidth, group=seqname, geom="density") + facet_wrap(~seqname)
bam <- scanBam("~/Documents/R Projects/Soybeans/cnv/bam/Adams.bam")
library(rjson)
json_data <- fromJSON(paste(readlines(json_file), collapse=""))
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
json_file <- "http://www.reddit.com/r/subreddit/new.json?sort=new&count=100"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
str(json_data)
length(json_data)
tmp <- json_data[[1]]
str(tmp)
tmp <- json_data[[2]]
str(tmp)
tmp2 <- tmp[[1]]
str(tmp)
length(tmp)
tmp2 <- tmp[[2]]
str(tmp2)
json_file <- "http://www.reddit.com/r/dogecoin/new.json?sort=new&count=100"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
tmp <- json_data[[2]]
tmp2 <- tmp[[2]]
tmp3 <- unlist(tmp)
str(tmp3)
head(tmp3)
tmp2 <- unlist(json_data)
head(tmp2)
tmp <- json_data[[2]]
tmp[[1]]
tmp2 <- tmp[[2]]
tmp2[[1]]
mode(tmp2)
reddit.to.df <- ldply(json_data, function(lst){
if(mode(lst)!="list") return(data.frame())
ldply(lst, function(post){
data.frame(post[["data"]], type=post[["kind"]])
})
}
)
library(plyr)
reddit.df <- ldply(json_data, function(lst){
if(mode(lst)!="list") return(data.frame())
ldply(lst, function(post){
data.frame(post[["data"]], type=post[["kind"]])
})
}
)
post <- tmp2[[1]]
post[["data"]]
reddit.df <- ldply(json_data, function(lst){
if(mode(lst)!="list") return(data.frame())
ldply(lst, function(post){
if(is.null(post[["data"]])) return(data.frame())
data.frame(post[["data"]], type=post[["kind"]])
})
})
post[["data"]]
data.frame(post[["data"]], type=post[["kind"]])
post[["kind"]]
reddit.df <- ldply(json_data, function(lst){
if(mode(lst)!="list") return(data.frame())
ldply(lst, function(post){
if(is.null(post[["data"]])) return(data.frame())
x <- data.frame(post[["data"]], stringsAsFactors=FALSE)
x$type <- post[["kind"]])
x
})
})
reddit.df <- ldply(json_data, function(lst){
if(mode(lst)!="list") return(data.frame())
ldply(lst, function(post){
if(is.null(post[["data"]])) return(data.frame())
x <- data.frame(post[["data"]], stringsAsFactors=FALSE)
x$type <- post[["kind"]]
x
})
})
reddit.df <- ldply(json_data, function(lst){
if(mode(lst)!="list") return(data.frame())
ldply(lst, function(post){
if(!"data"%in%names(post)) return(data.frame())
x <- data.frame(post[["data"]], stringsAsFactors=FALSE)
x$type <- post[["kind"]]
x
})
})
names(post)
!"data"%in%names(post)
tmp[[25]]
tmp2[[25]]
tmp <- json_data[[2]]
tmp2 <- tmp[[1]]
tmp2 <- tmp[[2]]
lst <- json_data[[2]]
mode(lst)!="list"
lst[[2]] -> post
reddit.df <- ldply(json_data, function(lst){
if(mode(lst)!="list") return(data.frame())
ldply(lst, function(page){
if(mode(page)!="list") return(data.frame())
ldply(page, function(post){
if(!"data"%in%names(post)) return(data.frame())
x <- data.frame(post[["data"]], stringsAsFactors=FALSE)
x$type <- post[["kind"]]
x
})
})
})
page <- post
post <- page[[1]]
post
!"data"%in%names(post)
x <- data.frame(post[["data"]], stringsAsFactors=FALSE)
x <- as.data.frame(post[["data"]], stringsAsFactors=FALSE)
x <- as.data.frame(unlist(post[["data"]]), stringsAsFactors=FALSE)
x
x <- as.data.frame(t(unlist(post[["data"]])), stringsAsFactors=FALSE)
x
reddit.df <- ldply(json_data, function(lst){
if(mode(lst)!="list") return(data.frame())
ldply(lst, function(page){
if(mode(page)!="list") return(data.frame())
ldply(page, function(post){
if(!"data"%in%names(post)) return(data.frame())
x <- as.data.frame(t(unlist(post[["data"]])), stringsAsFactors=FALSE)
x$type <- post[["kind"]]
x
})
})
})
reddit.df
setwd("~/Dropbox/GraphicsGroup/R workshops/r-shiny")
install.packages("shiny")
tmp <- installed.packages()
head(tmp)
to.install <- workshop.packages[which(!workshop.packages%in%tmp[,1])]
workshop.packages <- c("ggplot2", "plyr", "lubridate")
to.install <- workshop.packages[which(!workshop.packages%in%tmp[,1])]
to.install
install.packages(to.install)
library(workshop.packages)
require(workshop.packages)
library(ggplot2)
library(plyr)
library(lubridate)
qplot(x=0, y=0, label="Good to go!")
qplot(x=0, y=0, label="Good to go!", geom="text")
qplot(x=0, y=0, label="Good to go!", geom="text") + theme_blank()
qplot(x=0, y=0, label="Good to go!", geom="text") + theme_bw() + theme(axis.text=element_blank(), axis.title=element_blank)
?theme
qplot(x=0, y=0, label="Good to go!", geom="text") + theme_bw() + theme(axis.text=element_blank(), axis.title=element_blank())
qplot(x=0, y=0, label="Good to go!", geom="text") + theme_bw() + theme(axis.text=element_blank(), axis.title=element_blank(), axis.ticks=element_blank())
setwd("~/Dropbox/GraphicsGroup/R workshops/r-shiny")
library(shiny)
runExample("02_text")
?selectInput
?numericInput
?verbatimTextOutput
?tableOutput
runExample("03_reactivity")
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
datasetInput
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
input <- list()
input$dataset <- "rock" # set the input value
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
datasetInput()
?sliderInput
setwd("~/Dropbox/GraphicsGroup/R workshops/r-shiny")
library(shiny)
library(shiny)
??checkboxGroupInp
?checkboxGroupInp
?checkboxGroupInput
library(shiny)
htmlOutput?
?htmlOutput
data <- read.csv("./OkCupidSmall.csv", stringsAsFactors=FALSE)
setwd("./Code/Skeleton/")
data <- read.csv("./OkCupidSmall.csv", stringsAsFactors=FALSE)
head(data)
data <- read.csv("./OkCupid.csv", stringsAsFactors=FALSE)
headhead(data)
head(data)
data$essay_0 <- gsub("\\t", " ", data$essay_0)
head(data$essay0)
head(data$essay_0)
data$essay_0 <- gsub(": )", ":)", data$essay_0)
head(data$essay_0)
View(data)
library(stringr)
data$city <- word(data$location, sep=", ")
data$region <- word(data$location, sep=", ")
data$region <- word(data$location, sep=", ", start=-1)
head(data$region)
unique(data$region)
names(data)
data <- data[,c(1:4, 22:23, 6:21)]
head(data)
data$Religion.intense <- word(data$Religion, sep=" and ")
head(data$Religion.intense)
table(data$Religion.intense)
data$Religion.intense <- word(data$Religion, sep=c(" and ", " but "), start=-1)
table(data$Religion.intense)
data$Religion.intense <- word(data$Religion, sep=" [and][but] ", start=-1)
table(data$Religion.intense)
data$Religion.intense <- word(data$Religion, sep=" [[and][but]] ", start=-1)
table(data$Religion.intense)
data$Religion.intense <- word(data$Religion, sep=" [and|but] ", start=-1)
table(data$Religion.intense)
data$Religion.intense <- word(data$Religion, sep=" (and|but) ", start=-1)
table(data$Religion.intense)
data$Religion.intense <- word(data$Religion, sep=".+?(and|but) ", start=-1)
table(data$Religion.intense)
data$Religion.intense <- word(data$Religion, sep=" (and|but) ", start=-1)
table(data$Religion.intense)
?transform
data$Religion.intense <- ifelse(data$Religion.intense%in%c("Agnosticism", "Atheism", "Buddhism", "Catholicism", "Christianity", "Hinduism", "Islam", "Judaism"), NA, data$Religion.intense)
table(data$Religion.intense)
table(data$Religion.intense, useNA=T)
table(data$Religion.intense, useNA=TRUE)
table(data$Religion.intense, useNA)
?table
table(data$Religion.intense, exclude=NULL)
data$Sign.intense <- word(data$Sign, sep=" (and|but) ", start=-1)
table(data$Sign.intense, exclude=NULL)
data$Sign.intense <- ifelse(grepl(" ", data$Sign.intense), NA, data$Sign.intense)
table(data$Sign.intense, exclude=NULL)
data$Sign.intense <- word(data$Sign, sep=" (and|but) ", start=-1)
data$Sign.intense <- ifelse(!grepl(" ", data$Sign.intense), NA, data$Sign.intense)
data$Sign.intense <- word(data$Sign, sep=" (and|but) ", start=-1)
data$Sign.intense <- ifelse(grepl(" ", data$Sign.intense), NA, data$Sign.intense)
table(data$Sign.intense, exclude=NULL)
data$Sign.intense <- word(data$Sign, sep=" (and|but) ", start=-1)
data$Sign.intense <- ifelse(!grepl(" ", data$Sign.intense), NA, data$Sign.intense)
table(data$Sign.intense, exclude=NULL)
table(word(data$Religion, sep=" (and|but) "))
data$Religion <- word(data$Religion, sep=" (and|but) ")
data$Sign <- word(data$Sign, sep=" (and|but) ")
data <- read.csv("./OkCupid.csv", stringsAsFactors=FALSE)
data$essay_0 <- gsub("\\t", " ", data$essay_0)
data$essay_0 <- gsub(": )", ":)", data$essay_0)
library(stringr)
data$city <- word(data$location, sep=", ")
data$region <- word(data$location, sep=", ", start=-1)
data <- data[,c(1:4, 22:23, 6:21)]
data$Religion.intense <- word(data$Religion, sep=" (and|but) ", start=-1)
data$Religion.intense <- ifelse(data$Religion.intense%in%c("Agnosticism", "Atheism", "Buddhism", "Catholicism", "Christianity", "Hinduism", "Islam", "Judaism"), NA, data$Religion.intense)
data$Religion <- word(data$Religion, sep=" (and|but) ")
data$Sign.intense <- word(data$Sign, sep=" (and|but) ", start=-1)
data$Sign.intense <- ifelse(!grepl(" ", data$Sign.intense), NA, data$Sign.intense)
data$Sign <- word(data$Sign, sep=" (and|but) ")
names(data)
data <- data[,c(1:14, 23, 15, 24, 16:22)]
table(data$Education)
table(data$Body.Type)
table(data$status)
table(data$Diet)
rowSums(is.na(data))
sum(rowSums(is.na(data))<5)
sum(rowSums(is.na(data))<4)
subdata <- subset(data, rowSums(is.nadata)<4)
subdata <- subset(data, rowSums(is.na(data))<4)
write.csv("./OkCupidSmall.csv", row.names=F)
write.csv(subdata, "./OkCupidSmall.csv", row.names=F)
table(data$Height)
as.numeric(gsub("in", word(data$Height, start=2)))
as.numeric(gsub("in", "", word(data$Height, start=2)))
gsub("in", "", word(data$Height, start=-1))
word(data$Height, sep="in")
as.numeric(word(word(data$Height, sep="in"), -1))
as.numeric(word(data$Height, sep="ft"))*12+as.numeric(word(word(data$Height, sep="in"), start=-1))
data$Height2 <- data$Height
data$Height <- as.numeric(word(data$Height, sep="ft"))*12+as.numeric(word(word(data$Height, sep="in"), start=-1))
qplot(data$Height)
library(ggplot2)
qplot(data$Height)
qplot(data$Height, group=data$gender, geom="density")
data$Height <- data$Height2
word(data$Height, sep="\\(")
word(data$Height, sep="\\(", start=-1)
gsub("m)\\.", "", word(data$Height, sep="\\(", start=-1))
data$Height <- as.numeric(gsub("m)\\.", "", word(data$Height, sep="\\(", start=-1)))
qplot(data$Height, group=data$gender, geom="density")
data$Height <- data$Height2
data$Height<- as.numeric(word(data$Height, sep="ft"))+as.numeric(word(word(data$Height, sep="in"), start=-1))/12
qplot(data$Height, group=data$gender, geom="density")
head(data)
subdata <- subset(data, rowSums(is.na(data))<4)[,1:24]
write.csv(subdata, "./OkCupidSmall.csv", row.names=F)
data <- read.csv("./OkCupidSmall.csv", stringsAsFactors=FALSE)
input <- list()
input$variable <- "gender"
qplot(data=data, x=Height, geom="density", colour=aes_string(input$variable))
?aes_string
qplot(data=data, x=Height, geom="density", aes_string(colour=input$variable))
qplot(data=data, geom="density", aes_string(x="Height", colour=input$variable))
ggplot(data=data, aes_string(x="Height", colour=input$variable)) + geom_density()
ggplot(data=data, aes_string(x="Height", colour=input$variable)) + geom_density(adjust=2)
ggplot(data=data, aes_string(x="Height", colour=input$variable)) + geom_density(adjust=1.2)
ggplot(data=data, aes_string(x="Height", colour=input$variable)) + geom_density(adjust=1.4)
print(ggplot(data=data, aes_string(x="Height", colour=input$variable)) +
geom_density(adjust=1.4))
print(ggplot(data=data, aes_string(x="Height", colour=input$variable)) +
geom_density(adjust=1.4, aes(y=..count..), stat="bin"))
print(ggplot(data=data, aes_string(x="Height", colour=input$variable)) +
geom_density(aes(y=..count..), stat="bin"))
data <- read.csv("./OkCupid.csv", stringsAsFactors=FALSE)
data$essay_0 <- gsub("\\t", " ", data$essay_0)
data$essay_0 <- gsub(": )", ":)", data$essay_0)
library(stringr)
data$city <- word(data$location, sep=", ")
data$region <- word(data$location, sep=", ", start=-1)
data <- data[,c(1:4, 22:23, 6:21)]
data$Religion.intense <- word(data$Religion, sep=" (and|but) ", start=-1)
data$Religion.intense <- ifelse(data$Religion.intense%in%c("Agnosticism", "Atheism", "Buddhism", "Catholicism", "Christianity", "Hinduism", "Islam", "Judaism"), NA, data$Religion.intense)
data$Religion <- word(data$Religion, sep=" (and|but) ")
data$Sign.intense <- word(data$Sign, sep=" (and|but) ", start=-1)
data$Sign.intense <- ifelse(!grepl(" ", data$Sign.intense), NA, data$Sign.intense)
data$Sign <- word(data$Sign, sep=" (and|but) ")
data <- data[,c(1:14, 23, 15, 24, 16:22)]
data$Height2 <- data$Height
data$Height<- as.numeric(word(data$Height, sep="ft"))+as.numeric(word(word(data$Height, sep="in"), start=-1))/12
subdata <- subset(data, !is.na(Height) & !is.na(gender) & rowSums(is.na(data))<6)[,1:24]
print(ggplot(data=data, aes_string(x="Height", colour=input$variable)) +
geom_density(aes(y=..count..), stat="bin"))
sample <- c(sample(which(data$gender=="F"), 2000),
sample(which(data$gender=="M"), 2000))
subdata <- subset(data[,sample], !is.na(Height) & !is.na(gender) & rowSums(is.na(data[,sample]))<6)[,1:24]
sample <- c(sample(which(data$gender=="F"), 2000),
sample(which(data$gender=="M"), 2000))
subdata <- subset(data[sample,], !is.na(Height) & !is.na(gender) & rowSums(is.na(data[sample,]))<6)[,1:24]
table(subdata$gender)
sample <- c(sample(which(data$gender=="F" & !is.na(data$Height) & !is.na(data$gender)), 1000),
sample(which(data$gender=="M" & !is.na(data$Height) & !is.na(data$gender)), 1000))
subdata <- subset(data[sample,], rowSums(is.na(data[sample,]))<6)[,1:24]
sample <- unique(
c(sample(which(data$gender=="F" & !is.na(data$Height) & !is.na(data$gender)), 1000),
sample(which(data$gender=="M" & !is.na(data$Height) & !is.na(data$gender)), 1000)))
subdata <- data[sample,1:24]
write.csv(subdata, "./OkCupidSmall.csv", row.names=F)
data <- read.csv("./OkCupidSmall.csv", stringsAsFactors=FALSE)
print(ggplot(data=data, aes_string(x="Height", colour=input$variable)) +
geom_density(aes(y=..count..), stat="bin"))
print(ggplot(data=data, aes_string(x="Height", colour=input$variable)) +
geom_density())
# format OkCupid Data for processing
data <- read.csv("./OkCupid.csv", stringsAsFactors=FALSE)
data$essay_0 <- gsub("\\t", " ", data$essay_0)
data$essay_0 <- gsub(": )", ":)", data$essay_0)
library(stringr)
data$city <- word(data$location, sep=", ")
data$region <- word(data$location, sep=", ", start=-1)
data <- data[,c(1:4, 22:23, 6:21)]
data$Religion.intense <- word(data$Religion, sep=" (and|but) ", start=-1)
data$Religion.intense <- ifelse(data$Religion.intense%in%c("Agnosticism", "Atheism", "Buddhism", "Catholicism", "Christianity", "Hinduism", "Islam", "Judaism"), NA, data$Religion.intense)
data$Religion <- word(data$Religion, sep=" (and|but) ")
data$Sign.intense <- word(data$Sign, sep=" (and|but) ", start=-1)
data$Sign.intense <- ifelse(!grepl(" ", data$Sign.intense), NA, data$Sign.intense)
data$Sign <- word(data$Sign, sep=" (and|but) ")
data <- data[,c(1:14, 23, 15, 24, 16:22)]
data$Height2 <- data$Height
data$Height<- as.numeric(word(data$Height, sep="ft"))+as.numeric(word(word(data$Height, sep="in"), start=-1))/12
sample <- unique(
c(sample(which(data$gender=="F" & !is.na(data$Height) & !is.na(data$gender)), 2000),
sample(which(data$gender=="M" & !is.na(data$Height) & !is.na(data$gender)), 2000)))
subdata <- data[sample,1:24]
write.csv(subdata, "./OkCupidSmall.csv", row.names=F)
data <- read.csv("./OkCupidSmall.csv", stringsAsFactors=FALSE)
print(ggplot(data=data, aes_string(x="Height", colour=input$variable)) +
geom_density())
library(shiny)
?renderPrint
summary(data)
names(data)
table(data$age)
library(shiny)
runApp("../Skeleton/")
library(plyr)
ddply(data, input$variable, summary)
ddply(data, input$variable, function(df) df$Height)
ddply(data, .(input$variable), function(df) df$Height)
input$variable
?plyr
output$summaryText <- renderPrint({
ddply(data, .(data[,input$variable]), function(df) summary(df$Height))
})
ddply(data, .(data[,input$variable]), function(df) summary(df$Height))
tmp <- ddply(data, .(data[,input$variable]), function(df) summary(df$Height))
names(tmp)[1] <- input$variable
print(tmp)
?stringr
?word
runApp("../Skeleton/")
?renderText
runApp("../Skeleton/")
