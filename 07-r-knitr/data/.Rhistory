ans <- ""
if(length(key[[j]])>1){
tmp <- which(key[[j]]==i[[j]][1])
#       print(tmp)
if(length(tmp)==0) ans="X" else ans=c("Position", "Similarity")[tmp]
}else{
ans <- ifelse(j%in%color, "Similarity", "Position")
}
return(ans)
}))
})
j <- 19
is.na(i[[j]][1])
ans <- ""
length(key[[j]])>1
tmp <- which(key[[j]]==i[[j]][1])
if(length(tmp)==0) ans="X" else ans=c("Position", "Similarity")[tmp]
ans <- ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp])
ans
j <- 20
is.na(i[[j]][1])
if(is.na(i[[j]][1])) ans <- NA
if(length(key[[j]])>1){
tmp <- which(key[[j]]==i[[j]][1])
#       print(tmp)
ans <- ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp])
}else{
ans <- ifelse(j%in%color, "Similarity", "Position")
}
ans
primary.ans <- ldply(lineups, function(i){
t(lapply(1:60, function(j){
ans <- ""
if(is.na(i[[j]][1])) ans <- NA
if(length(key[[j]])>1){
tmp <- which(key[[j]]==i[[j]][1])
#       print(tmp)
ans <- ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp])
}else{
ans <- ifelse(j%in%color, "Similarity", "Position")
}
return(ans)
}))
})
primary.ans <- ldply(lineups, function(i){
t(lapply(1:60, function(j){
ans <- ""
if(is.na(i[[j]][1])) ans <- NA
if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][1])
#       print(tmp)
ans <- ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp])
}else{
ans <- ifelse(j%in%color, "Similarity", "Position")
}
return(ans)
}))
})
primary.ans <- llply(lineups, function(i){
lapply(1:60, function(j){
ans <- ""
if(is.na(i[[j]][1])) ans <- NA
if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][1])
#       print(tmp)
ans <- ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp])
}else{
ans <- ifelse(j%in%color, "Similarity", "Position")
}
return(ans)
})
})
primary.ans[[1]]
primary.ans <- llply(lineups, function(i){
unlist(lapply(1:60, function(j){
ans <- ""
if(is.na(i[[j]][1])) ans <- NA
if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][1])
#       print(tmp)
ans <- ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp])
}else{
ans <- ifelse(j%in%color, "Similarity", "Position")
}
return(ans)
}))
})
primary.ans[[1]]
primary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
ans <- ""
if(is.na(i[[j]][1])) ans <- NA
if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][1])
#       print(tmp)
ans <- ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp])
}else{
ans <- ifelse(j%in%color, "Similarity", "Position")
}
return(ans)
}))
})
secondary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
ans <- ""
if(length(i[[j]])<2 || length(key[[j]])<2) return(NA)
if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][2])
#       print(tmp)
return(ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp]))
}
}))
})
secondary.ans
}, stringsAsFactors=FALSE)
secondary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
ans <- ""
if(length(i[[j]])<2 || length(key[[j]])<2) return(NA)
if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][2])
#       print(tmp)
return(ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp]))
}
}))
}, stringsAsFactors=FALSE)
str(primary.ans)
color <- c(2, 3, 5, 6, 9, 10, 13, 21, 22, 24, 26, 32, 42, 43, 46, 48, 49, 51, 60)
slope <- c(4, 11, 12, 16, 17, 23, 25, 28, 29, 36, 38, 39, 41, 44, 45, 47, 53, 55, 56, 58, 59)
dual <- which(!(1:60)%in%c(color, slope))
key2 <- read.csv("~/Documents/R Projects/VisualAptitude/Images/Lineups/LineupKey.csv", stringsAsFactors=F)
key2
sum(key2$type=="Color")
which(key2$type=="Color")
key2$name[which(key2$type=="Color")]
sort(key2$name[which(key2$type=="Color")])
key2 <- read.csv("~/Documents/R Projects/VisualAptitude/Images/Lineups/LineupKey.csv", stringsAsFactors=F)
sort(key2$name[which(key2$type=="Color")])
color <- c(2, 3, 5, 6, 9, 10, 13, 21, 22, 24, 26, 32, 42, 43, 46, 48, 49, 51, 55, 60)
slope <- c(4, 11, 12, 16, 17, 23, 25, 28, 29, 36, 38, 39, 41, 44, 45, 47, 53, 55, 56, 58, 59)
dual <- which(!(1:60)%in%c(color, slope))
dual
length(dual)
length(color)
slope <- c(4, 11, 12, 16, 17, 23, 25, 28, 29, 36, 38, 39, 41, 44, 45, 47, 53, 56, 58, 59)
dual <- which(!(1:60)%in%c(color, slope))
names(lineups) <- c("awesomesauce", "di", "geoff", "ianl", "ianm", "lindsay", "num", "sam", "sarah", "walter", "xiaoyue", "zorro")
primary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
ans <- ""
if(is.na(i[[j]][1])) ans <- NA
if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][1])
#       print(tmp)
ans <- ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp])
}else{
ans <- ifelse(j%in%color, "Similarity", "Position")
}
return(ans)
}))
})
head(primary.ans)
secondary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
ans <- ""
if(length(i[[j]])<2 || length(key[[j]])<2) return(NA)
if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][2])
#       print(tmp)
return(ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp]))
}
}))
})
lineup.summary <- data.frame(
proximity = rowSums(primary.ans[,slope]!="X", na.rm=TRUE),
similarity = rowSums(primary.ans[,color]!="X", na.rm=TRUE),
dual.prox = rowSums(primary.ans[,dual]=="Position", na.rm=TRUE),
dual.sim = rowSums(primary.ans[,dual]=="Similarity", na.rm=TRUE),
dual.prox.secondary = rowSums(secondary.ans[,dual]=="Position", na.rm=TRUE),
dual.sim.secondary = rowSums(secondary.ans[,dual]=="Similarity", na.rm=TRUE))
lineup.summary
lineup.summary <- data.frame(name=primary.ans$.id,
proximity = rowSums(primary.ans[,slope]!="X", na.rm=TRUE),
similarity = rowSums(primary.ans[,color]!="X", na.rm=TRUE),
dual.prox = rowSums(primary.ans[,dual]=="Position", na.rm=TRUE),
dual.sim = rowSums(primary.ans[,dual]=="Similarity", na.rm=TRUE),
dual.prox.secondary = rowSums(secondary.ans[,dual]=="Position", na.rm=TRUE),
dual.sim.secondary = rowSums(secondary.ans[,dual]=="Similarity", na.rm=TRUE))
lineup.summary
primary.ans[which(primary.ans$.id=="ianl"),]
lineup.summary[["ianl"]]
lineup.summary["ianl"]
lineup[["ianl"]]
lineups[["ianl"]]
lineups[["ianl"]]-> i
i
j <- 20
ans <- ""
is.na(i[[j]][1])
length(key[[j]])>1
primary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
ans <- ""
if(is.na(i[[j]][1])){
ans <- NA
} else if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][1])
#       print(tmp)
ans <- ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp])
}else{
ans <- ifelse(j%in%color, "Similarity", "Position")
}
return(ans)
}))
})
lineup.summary <- data.frame(name=primary.ans$.id,
proximity = rowSums(primary.ans[,slope]!="X", na.rm=TRUE),
similarity = rowSums(primary.ans[,color]!="X", na.rm=TRUE),
dual.prox = rowSums(primary.ans[,dual]=="Position", na.rm=TRUE),
dual.sim = rowSums(primary.ans[,dual]=="Similarity", na.rm=TRUE),
dual.prox.secondary = rowSums(secondary.ans[,dual]=="Position", na.rm=TRUE),
dual.sim.secondary = rowSums(secondary.ans[,dual]=="Similarity", na.rm=TRUE))
lineup.summary
primary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
if(is.na(i[[j]][1])){
return(NA)
} else if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][1])
#       print(tmp)
return(ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp]))
}else{
return(ifelse(j%in%color, "Similarity", "Position"))
}
return("")
}))
})
function(){
if(is.na(i[[j]][1])){
return(NA)
} else if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][1])
#       print(tmp)
return(ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp]))
}else{
return(ifelse(j%in%color, "Similarity", "Position"))
}
return("")
}
{
if(is.na(i[[j]][1])){
return(NA)
} else if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][1])
#       print(tmp)
return(ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp]))
}else{
return(ifelse(j%in%color, "Similarity", "Position"))
}
return("")}
is.na(i[[j]][1])
primary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
if(is.na(i[[j]][1])){
return(NA)
} else if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][1])
#       print(tmp)
return(ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp]))
}else{
return(ifelse(j%in%color, "Similarity", "Position"))
}
return("")
}))
})
lineup.summary <- data.frame(name=primary.ans$.id,
position = rowSums(primary.ans[,slope]=="Position", na.rm=TRUE),
similarity = rowSums(primary.ans[,color]=="Similarity", na.rm=TRUE),
dual.pos = rowSums(primary.ans[,dual]=="Position", na.rm=TRUE),
dual.sim = rowSums(primary.ans[,dual]=="Similarity", na.rm=TRUE),
dual.pos.secondary = rowSums(secondary.ans[,dual]=="Position", na.rm=TRUE),
dual.sim.secondary = rowSums(secondary.ans[,dual]=="Similarity", na.rm=TRUE))
lineup.summary
lineups$key <- key
primary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
if(is.na(i[[j]][1])){
return(NA)
} else if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][1])
#       print(tmp)
return(ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp]))
}else{
return(ifelse(j%in%color, "Similarity", "Position"))
}
return("")
}))
})
secondary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
ans <- ""
if(length(i[[j]])<2 || length(key[[j]])<2) return(NA)
if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][2])
#       print(tmp)
return(ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp]))
}
}))
})
lineup.summary <- data.frame(name=primary.ans$.id,
position = rowSums(primary.ans[,slope]=="Position", na.rm=TRUE),
similarity = rowSums(primary.ans[,color]=="Similarity", na.rm=TRUE),
dual.pos = rowSums(primary.ans[,dual]=="Position", na.rm=TRUE),
dual.sim = rowSums(primary.ans[,dual]=="Similarity", na.rm=TRUE),
dual.pos.secondary = rowSums(secondary.ans[,dual]=="Position", na.rm=TRUE),
dual.sim.secondary = rowSums(secondary.ans[,dual]=="Similarity", na.rm=TRUE))
lineup.summary
lineup.summary <- data.frame(name=primary.ans$.id,
position = colSums(primary.ans[,slope]=="Position", na.rm=TRUE),
similarity = colSums(primary.ans[,color]=="Similarity", na.rm=TRUE),
dual.pos = colSums(primary.ans[,dual]=="Position", na.rm=TRUE),
dual.sim = colSums(primary.ans[,dual]=="Similarity", na.rm=TRUE),
dual.pos.secondary = colSums(secondary.ans[,dual]=="Position", na.rm=TRUE),
dual.sim.secondary = colSums(secondary.ans[,dual]=="Similarity", na.rm=TRUE))
lineup.summary <- data.frame(name=primary.ans$.id,
position = rowSums(primary.ans[,slope+1]=="Position", na.rm=TRUE),
similarity = rowSums(primary.ans[,color+1]=="Similarity", na.rm=TRUE),
dual.pos = rowSums(primary.ans[,dual+1]=="Position", na.rm=TRUE),
dual.sim = rowSums(primary.ans[,dual+1]=="Similarity", na.rm=TRUE),
dual.pos.secondary = rowSums(secondary.ans[,dual+1]=="Position", na.rm=TRUE),
dual.sim.secondary = rowSums(secondary.ans[,dual+1]=="Similarity", na.rm=TRUE))
lineup.summary
primary.ans[4, 13]
primary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
if(is.na(i[[j]][1])){
return(NA)
} else if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][1])
#       print(tmp)
return(ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp]))
}else{
qtype <- ifelse(j%in%color, "Similarity", "Position")
return(ifelse(key[[j]]==i[[j]]), qtype, "X")
}
return("")
}))
})
primary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
if(is.na(i[[j]][1])){
return(NA)
} else if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][1])
#       print(tmp)
return(ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp]))
}else{
qtype <- ifelse(j%in%color, "Similarity", "Position")
return(ifelse(key[[j]]==i[[j]], qtype, "X"))
}
return("")
}))
})
is.na(i[[j]][1])
j <- 17
is.na(i[[j]][1]
)
length(key[[j]])>1
qtype <- ifelse(j%in%color, "Similarity", "Position")
ifelse(key[[j]]==i[[j]], qtype, "X")
primary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
if(is.na(i[[j]][1])){
return(NA)
} else if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][1])
#       print(tmp)
return(ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp]))
}else{
qtype <- ifelse(j%in%color, "Similarity", "Position")
return(ifelse(key[[j]]==i[[j]][1], qtype, "X"))
}
return("")
}))
})
lineup.summary <- data.frame(name=primary.ans$.id,
position = rowSums(primary.ans[,slope+1]=="Position", na.rm=TRUE),
similarity = rowSums(primary.ans[,color+1]=="Similarity", na.rm=TRUE),
dual.pos = rowSums(primary.ans[,dual+1]=="Position", na.rm=TRUE),
dual.sim = rowSums(primary.ans[,dual+1]=="Similarity", na.rm=TRUE),
dual.pos.secondary = rowSums(secondary.ans[,dual+1]=="Position", na.rm=TRUE),
dual.sim.secondary = rowSums(secondary.ans[,dual+1]=="Similarity", na.rm=TRUE))
lineup.summary
key2
lapply(1:nrow(key), function(k) c(key2$target1[k], key2$target2[k])[which(!is.na(key2[k, 2:3]))])
lapply(1:nrow(key2), function(k) c(key2$target1[k], key2$target2[k])[which(!is.na(key2[k, 2:3]))])
key <- lapply(1:nrow(key2), function(k) c(key2$target1[k], key2$target2[k])[which(!is.na(key2[k, 2:3]))])
lineups$key <- key
primary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
if(is.na(i[[j]][1])){
return(NA)
} else if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][1])
#       print(tmp)
return(ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp]))
}else{
qtype <- ifelse(j%in%color, "Similarity", "Position")
return(ifelse(key[[j]]==i[[j]][1], qtype, "X"))
}
return("")
}))
})
secondary.ans <- ldply(lineups, function(i){
unlist(lapply(1:60, function(j){
ans <- ""
if(length(i[[j]])<2 || length(key[[j]])<2) return(NA)
if(length(key[[j]])>1){
tmp <- which(key[[j]]%in%i[[j]][2])
#       print(tmp)
return(ifelse(length(tmp)==0, "X", c("Position", "Similarity")[tmp]))
}
}))
})
lineup.summary <- data.frame(name=primary.ans$.id,
position = rowSums(primary.ans[,slope+1]=="Position", na.rm=TRUE),
similarity = rowSums(primary.ans[,color+1]=="Similarity", na.rm=TRUE),
dual.pos = rowSums(primary.ans[,dual+1]=="Position", na.rm=TRUE),
dual.sim = rowSums(primary.ans[,dual+1]=="Similarity", na.rm=TRUE),
dual.pos.secondary = rowSums(secondary.ans[,dual+1]=="Position", na.rm=TRUE),
dual.sim.secondary = rowSums(secondary.ans[,dual+1]=="Similarity", na.rm=TRUE))
lineup.summary
head(cog.tests)
cog.tests <- cbind(name=c("awesomesauce", "di", "geoff", "ianl", "ianm", "lindsay", "num", "sam", "sarah", "walter", "xiaoyue", "zorro"), rbind(awesomesauce.cog, di.cog, geoff.cog, ianl.cog, ianm.cog, lindsay.cog, num.cog, sam.cog, sarah.cog, walter.cog, xiaoyue.cog, zorro.cog))
cog.tests <- cbind(name=c("awesomesauce", "di", "geoff", "ianl", "ianm", "lindsay", "num", "sam", "sarah", "walter", "xiaoyue", "zorro"), cog.tests)
cog.tests
qplot(data=cog.tests, x=paper.folding, y=fig.class)
library(ggplot2)
qplot(data=cog.tests, x=paper.folding, y=fig.class)
qplot(data=cog.tests, x=card.rotation, y=fig.class)
qplot(data=cog.tests, x=card.rotation, y=vst)
qplot(data=cog.tests, x=card.rotation, y=vst/vst.attempt)
qplot(data=lineup.summary, x=position, y=dual.pos)
qplot(data=lineup.summary, x=position)
lineup.summary2 <- melt(lineup.summary, id.vars=name)
library(reshape2)
lineup.summary2 <- melt(lineup.summary, id.vars=name)
lineup.summary2 <- melt(lineup.summary, id.vars=1)
head(lineup.summary)
head(lineup.summary2)
qplot(data=lineup.summary2, x=value, facets=~variable)
qplot(data=lineup.summary2, x=value, facets=~variable, binwidth=1)
qplot(data=lineup.summary2, x=value, facets=~variable, binwidth=1, weight=value)
qplot(data=lineup.summary2, x=value, facets=~variable, binwidth=1)
2bad <- 3 # this doesn't work!
aa == aA
aA <- 3
Aa <- 4
aa <- 5
aa == aA
for <- 10
c <- 10 ### this is super-bad practice... now how do you define a vector?
rm("c")
c(1, 2, 3)
data(iris)
iris
ggplot(data=iris) + geom_point(aes(x=Sepal.Length, y=Petal.Length)) + facet_wrap(~species)
library(ggplot2)
ggplot(data=iris) + geom_point(aes(x=Sepal.Length, y=Petal.Length)) + facet_wrap(~species)
ggplot(data=iris) + geom_point(aes(x=Sepal.Length, y=Petal.Length)) + facet_wrap(~Species)
ggplot(data=iris) + geom_point(aes(x=Sepal.Length, y=Petal.Length, colour=Sepal.Width)) + facet_wrap(~Species)
data(Animals)
data()
data(movies)
head(movies)
?movies
table(movies$mpaa)
movies.long <- melt(movies, id.vars=c(1:6, 17), value.vars=18:24)
library(reshape2)
movies.long <- melt(movies, id.vars=c(1:6, 17), value.vars=18:24)
head(movies.long)
?melt
movies.long <- melt(movies, id.vars=c(1:6, 17), measure.vars=18:24)
head(movies.long)
movies.long <- melt(movies, id.vars=c(1:6, 17), measure.vars=18:24, variable.name="genre", value.name="genre.true")
movies.long <- subset(movies.long, genre.true==1)[,-9]
head(movies.long)
ggplot(data=movies.long) + geom_point(aes(x=year, y=rating, colour=mpaa)) + facet_wrap(~genre)
ggplot(data=movies.long) + geom_point(aes(x=year, y=rating)) + facet_wrap(~genre)
ggplot(data=movies.long) + geom_point(aes(x=year, y=length)) + facet_wrap(~genre)
ggplot(data=movies.long) + geom_density(aes(x=length, colour=genre))
ggplot(data=movies.long) + geom_density(aes(x=length, fill=genre)) + facet_wrap(~genre)
ggplot(data=movies.long) + geom_density(aes(x=length, fill=genre)) + facet_wrap(~genre, scales="free")
getwd()
setwd("./Dropbox/GraphicsGroup/R workshops/01-r-intro/data/")
write.csv("MovieSummary.csv")
write.csv(movies.long, "MovieSummary.csv")
ggplot(data=movies.long) + geom_density(aes(x=rating, fill=genre)) + facet_wrap(~genre, scales="free")
ggplot(data=movies.long) + geom_density(aes(x=length, fill=genre)) + facet_wrap(~genre, scales="free")
ggplot(data=movies.long) + geom_density(aes(x=rating, fill=genre)) + facet_wrap(~genre)
movies <- movies.long
ggplot(data=movies) + geom_density(aes(x=length, fill=genre)) + facet_wrap(~genre, scales="free")
ggplot(data=movies) + geom_density(aes(x=rating, fill=genre)) + facet_wrap(~genre)
ggplot(data=movies) + geom_density(aes(x=rating, fill=genre)) + facet_wrap(~genre)
head(movies)
ggplot(data=movies) + geom_density(aes(x=year, fill=genre)) + facet_wrap(~genre)
ggplot(data=movies) + geom_point(aes(x=year, y=length)) + facet_wrap(~genre)
ggplot(data=movies) + geom_point(aes(x=year, y=length), alpha=.2) + facet_wrap(~genre, scales="free_y")
ggplot(data=subset(movies, length>60)) + geom_point(aes(x=year, y=length), alpha=.2) + facet_wrap(~genre, scales="free_y")
ggplot(data=subset(movies, length>60)) + geom_point(aes(x=year, y=rating), alpha=.2) + facet_wrap(~genre, scales="free_y")
ggplot(data=subset(movies, length>60 & genre!="Short")) + geom_point(aes(x=year, y=rating), alpha=.2) + facet_wrap(~genre, scales="free_y")
qplot(data=movies, x=length, fill=genre, geom="density") + facet_wrap(~genre, scales="free")
